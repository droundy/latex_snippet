[package]
name = "latex_snippet"
version = "0.3.2"
authors = ["David Roundy <roundyd@physics.oregonstate.edu>"]
edition = "2018"
description = "Convert even erroneous LaTeX snippets into HTML"
license = "GPL-3.0-or-later"
repository = "https://github.com/droundy/latex_snippet"

[lib]
name = "latex_snippet"
crate-type = ["cdylib", "lib"]

[dependencies]

regex = "1.3"
wasm-bindgen = "0.2"

# The `console_error_panic_hook` crate provides better debugging of panics by
# logging them with `console.error`. This is great for development, but requires
# all the `std::fmt` and `std::panicking` infrastructure, so isn't great for
# code size when deploying.
console_error_panic_hook = { version = "0.1.6", optional = true }

# `wee_alloc` is a tiny allocator for wasm that is only ~1K in code size
# compared to the default allocator's ~10K. It is slower than the default
# allocator, however.
#
# Unfortunately, `wee_alloc` requires nightly Rust when targeting wasm for now.
wee_alloc = { version = "0.4.2", optional = true }

[features]
default = ["console_error_panic_hook"]

[dev-dependencies]
wasm-bindgen-test = "0.3"
expect-test = "1.0"

[profile.release]
# Tell `rustc` to optimize for small code size.
opt-level = "z"
lto = true
codegen-units = 1

[package.metadata.pyo3-pack]

[package.metadata.wasm-pack.profile.dev]
# Should `wasm-opt` be used to further optimize the wasm binary generated after
# the Rust compiler has finished? Using `wasm-opt` can often further decrease
# binary size or do clever tricks that haven't made their way into LLVM yet.
#
# Configuration is set to `false` by default for the dev profile, but it can
# be set to an array of strings which are explicit arguments to pass to
# `wasm-opt`. For example `['-Os']` would optimize for size while `['-O4']`
# would execute very expensive optimizations passes
wasm-opt = false

[package.metadata.wasm-pack.profile.release]
# Should `wasm-opt` be used to further optimize the wasm binary generated after
# the Rust compiler has finished? Using `wasm-opt` can often further decrease
# binary size or do clever tricks that haven't made their way into LLVM yet.
#
# Configuration is set to `false` by default for the dev profile, but it can
# be set to an array of strings which are explicit arguments to pass to
# `wasm-opt`. For example `['-Os']` would optimize for size while `['-O4']`
# would execute very expensive optimizations passes

# I set this to false because wasm-opt is crashing
wasm-opt = false

[workspace]
